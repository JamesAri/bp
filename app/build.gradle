import org.jetbrains.kotlin.gradle.dsl.KotlinCompile

plugins {
    // Core
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
    // Better navigation - allows to parcelize objects and use them in navigation
    id("kotlin-parcelize")
    // Hilt - DI
    id("kotlin-kapt")
    id("com.google.dagger.hilt.android")
    // Firebase - storage, auth, analytics, firestore, etc..
    id 'com.google.gms.google-services'
    // Serialization for Proto Datastore
    id 'org.jetbrains.kotlin.plugin.serialization'
}


android {
    namespace 'cz.zcu.students.lostandfound'
    compileSdk 33

    defaultConfig {
        // So we can access variables from local.properties in manifest
        Properties properties = new Properties()
        properties.load(project.rootProject.file('local.properties').newDataInputStream())
        manifestPlaceholders = [MAPS_API_KEY: "${properties.getProperty('MAPS_API_KEY')}"]

        applicationId "cz.zcu.students.lostandfound"
        minSdk 31
        targetSdk 33
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        vectorDrawables {
            useSupportLibrary true
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8
    }
    buildFeatures {
        compose true
    }
    composeOptions {
        kotlinCompilerExtensionVersion '1.3.2'
    }
    packagingOptions {
        resources {
            excludes += '/META-INF/{AL2.0,LGPL2.1}'
        }
    }
}

// Hilt - Allow references to generated code
kapt {
    correctErrorTypes = true
}

dependencies {
    // AndroidX (Core)
    implementation "androidx.core:core-ktx:$core_version"
    implementation "androidx.lifecycle:lifecycle-runtime-ktx:$androidx_lifecycle_runtime_version"
    implementation "androidx.activity:activity-compose:$activity_version"
    // Jetpack Compose
    implementation "androidx.appcompat:appcompat:$appcompat_version"
    implementation "androidx.compose.ui:ui:$compose_version"
    implementation "androidx.compose.ui:ui-tooling-preview:$compose_version"
    // Jetpack Compose - Material 3
    implementation "androidx.compose.material3:material3:$mateiral3_version"
    // Testing
    testImplementation "junit:junit:$junit_version"
    androidTestImplementation "androidx.test.ext:junit:$junit_ext_version"
    androidTestImplementation "androidx.test.espresso:espresso-core:$junit_espresso_version"
    androidTestImplementation "androidx.compose.ui:ui-test-junit4:$compose_version"
    debugImplementation "androidx.compose.ui:ui-tooling:$compose_version"
    debugImplementation "androidx.compose.ui:ui-test-manifest:$compose_version"
    // ViewModel utilities for Compose - getting reference of ViewModel in Compose
    implementation "androidx.lifecycle:lifecycle-viewmodel-compose:$viewmodel_lifecycle_version"
    // Compose Navigation - navigate between Composables
    implementation "androidx.navigation:navigation-compose:$compose_navigation_version"
    // Safely collect Flows in Compose (lifecycle awareness)
    implementation "androidx.lifecycle:lifecycle-runtime-compose:$compose_lifecycle_runtime_version"
    // Accompanist - group of libraries that aim to supplement Jetpack Compose with features
    // that are commonly required by developers but not yet available.
    implementation "com.google.accompanist:accompanist-permissions:$accompanist_version" // custom now
    implementation "com.google.accompanist:accompanist-systemuicontroller:$accompanist_version"
    implementation "com.google.accompanist:accompanist-flowlayout:$accompanist_version"
    // Hilt - dependency injection (DI)
    implementation "com.google.dagger:hilt-android:$hilt_version"
    kapt "com.google.dagger:hilt-android-compiler:$hilt_version"
    implementation "androidx.hilt:hilt-navigation-compose:$hilt_navigation_version"
    kapt "androidx.hilt:hilt-compiler:$hilt_navigation_version"
    // Location services
    implementation "com.google.android.gms:play-services-location:$google_location_serivices_version"
    // Map services
    implementation "com.google.android.gms:play-services-maps:$google_map_serivices_version"
    // Maps Compose library
    implementation "com.google.maps.android:maps-compose:2.11.4"
    // KTX for the Maps SDK for Android
    implementation 'com.google.maps.android:maps-ktx:3.4.0'
    // KTX for the Maps SDK for Android Utility Library
    implementation 'com.google.maps.android:maps-utils-ktx:3.4.0'
    // Integrating of Google Sign-In SDK
    implementation "com.google.android.gms:play-services-auth:$google_sign_in_sdk_version"
    // Firebase SDK - storage, auth, analytics, firestore, maintained by BOM
    implementation platform("com.google.firebase:firebase-bom:$firebase_bom_version")
    implementation "com.google.firebase:firebase-firestore-ktx:$firestore_version"
    implementation "com.google.firebase:firebase-storage-ktx"
    implementation "com.google.firebase:firebase-auth-ktx"
    implementation "com.google.firebase:firebase-analytics-ktx"
    // Firebase UI library for authentication
    implementation "com.firebaseui:firebase-ui-auth:$firebase_ui_auth_version"
    // Splashscreen - lets app launch with animation, including an into-app motion at launch
    implementation "androidx.core:core-splashscreen:$core_splashscreen_version"
    // Coil - An image loading library for Android backed by Kotlin coroutines
    implementation "io.coil-kt:coil:$coil_version"
    implementation "io.coil-kt:coil-compose:$coil_version"
    // Proto Datastore - data storage solution that allows you to store key-value pairs or typed
    // objects with protocol buffers.
    implementation "androidx.datastore:datastore:1.0.0"
    //          DO NOT CHANGE: Kotlin 1.7.20 is used by default
    implementation 'org.jetbrains.kotlinx:kotlinx-serialization-json:1.4.1'
    // Saving lists in Proto Datastore
    implementation "org.jetbrains.kotlinx:kotlinx-collections-immutable:0.3.5"
    // Livedata
    implementation("androidx.compose.runtime:runtime-livedata:1.4.1")

    // ======================================= 3RD PARTY ===========================================
    // Compose Dialogs - https://github.com/maxkeppeler/sheets-compose-dialogs
    implementation "com.maxkeppeler.sheets-compose-dialogs:core:$maxkeppeler_dialogs_version"
    implementation "com.maxkeppeler.sheets-compose-dialogs:list:$maxkeppeler_dialogs_version"
}

tasks.withType(KotlinCompile).configureEach {
    kotlinOptions {
        freeCompilerArgs += "-opt-in=androidx.compose.material3.ExperimentalMaterial3Api"
    }
}